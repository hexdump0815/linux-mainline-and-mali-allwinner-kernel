inspired by:
https://github.com/chewitt/mali-bifrost/commit/0e2454533dfd27fb36331610b4c81bb58233788b
https://lore.kernel.org/lkml/20191209135823.28465-3-hch@lst.de/

diff --git a/patches/0018-mali-support-building-against-4.20.patch b/patches/0018-mali-support-building-against-4.20.patch
index df0bc5e..78b876d 100644
--- a/patches/0018-mali-support-building-against-4.20.patch
+++ b/patches/0018-mali-support-building-against-4.20.patch
@@ -77,9 +77,9 @@ index 4deaa10..a14cb7d 100755
 +#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 20, 0)
 +	return ktime_get_boot_ns();
 +#else
- 	struct timespec tsval;
+ 	struct timespec64 tsval;
  	get_monotonic_boottime(&tsval);
- 	return (u64)timespec_to_ns(&tsval);
+ 	return (u64)timespec64_to_ns(&tsval);
 +#endif
  }
 -- 
diff --git a/patches/0021-mali-support-building-against-5.3.patch b/patches/0021-mali-support-building-against-5.3.patch
index f59e9e4..4e9ee7d 100644
--- a/patches/0021-mali-support-building-against-5.3.patch
+++ b/patches/0021-mali-support-building-against-5.3.patch
@@ -19,4 +19,4 @@ Signed-off-by: Maxime Ripard <maxime.ripard@bootlin.com>
 +#elif LINUX_VERSION_CODE >= KERNEL_VERSION(4, 20, 0)
  	return ktime_get_boot_ns();
  #else
- 	struct timespec tsval;
+ 	struct timespec64 tsval;
diff --git a/r6p0/src/devicedrv/mali/linux/mali_memory_cow.c b/r6p0/src/devicedrv/mali/linux/mali_memory_cow.c
index bcd0f87..f3f66a6 100755
--- a/r6p0/src/devicedrv/mali/linux/mali_memory_cow.c
+++ b/r6p0/src/devicedrv/mali/linux/mali_memory_cow.c
@@ -665,7 +665,7 @@ void _mali_mem_cow_copy_page(mali_page_node *src_node, mali_page_node *dst_node)
 		/*
 		* use ioremap to map src for BLOCK memory
 		*/
-		src = ioremap_nocache(_mali_page_node_get_dma_addr(src_node), _MALI_OSK_MALI_PAGE_SIZE);
+		src = ioremap(_mali_page_node_get_dma_addr(src_node), _MALI_OSK_MALI_PAGE_SIZE);
 		memcpy(dst, src , _MALI_OSK_MALI_PAGE_SIZE);
 		iounmap(src);
 	}
diff --git a/r6p0/src/devicedrv/mali/linux/mali_osk_low_level_mem.c b/r6p0/src/devicedrv/mali/linux/mali_osk_low_level_mem.c
index c14e872..d539287 100755
--- a/r6p0/src/devicedrv/mali/linux/mali_osk_low_level_mem.c
+++ b/r6p0/src/devicedrv/mali/linux/mali_osk_low_level_mem.c
@@ -33,7 +33,7 @@ void _mali_osk_write_mem_barrier(void)
 
 mali_io_address _mali_osk_mem_mapioregion(uintptr_t phys, u32 size, const char *description)
 {
-	return (mali_io_address)ioremap_nocache(phys, size);
+	return (mali_io_address)ioremap(phys, size);
 }
 
 void _mali_osk_mem_unmapioregion(uintptr_t phys, u32 size, mali_io_address virt)
diff --git a/r6p0/src/devicedrv/mali/linux/mali_osk_time.c b/r6p0/src/devicedrv/mali/linux/mali_osk_time.c
index 4deaa10..85da156 100755
--- a/r6p0/src/devicedrv/mali/linux/mali_osk_time.c
+++ b/r6p0/src/devicedrv/mali/linux/mali_osk_time.c
@@ -46,14 +46,14 @@ void _mali_osk_time_ubusydelay(u32 usecs)
 
 u64 _mali_osk_time_get_ns(void)
 {
-	struct timespec tsval;
-	getnstimeofday(&tsval);
-	return (u64)timespec_to_ns(&tsval);
+	struct timespec64 tsval;
+	ktime_get_real_ts64(&tsval);
+	return (u64)timespec64_to_ns(&tsval);
 }
 
 u64 _mali_osk_boot_time_get_ns(void)
 {
-	struct timespec tsval;
+	struct timespec64 tsval;
 	get_monotonic_boottime(&tsval);
-	return (u64)timespec_to_ns(&tsval);
+	return (u64)timespec64_to_ns(&tsval);
 }
diff --git a/r6p0/src/devicedrv/mali/platform/arm/arm.c b/r6p0/src/devicedrv/mali/platform/arm/arm.c
index 41ad63c..7f358cf 100755
--- a/r6p0/src/devicedrv/mali/platform/arm/arm.c
+++ b/r6p0/src/devicedrv/mali/platform/arm/arm.c
@@ -390,7 +390,7 @@ static u32 mali_read_phys(u32 phys_addr)
 	u32 phys_offset    = phys_addr & 0x00001FFF;
 	u32 map_size       = phys_offset + sizeof(u32);
 	u32 ret = 0xDEADBEEF;
-	void *mem_mapped = ioremap_nocache(phys_addr_page, map_size);
+	void *mem_mapped = ioremap(phys_addr_page, map_size);
 	if (NULL != mem_mapped) {
 		ret = (u32)ioread32(((u8 *)mem_mapped) + phys_offset);
 		iounmap(mem_mapped);
@@ -405,7 +405,7 @@ static void mali_write_phys(u32 phys_addr, u32 value)
 	u32 phys_addr_page = phys_addr & 0xFFFFE000;
 	u32 phys_offset    = phys_addr & 0x00001FFF;
 	u32 map_size       = phys_offset + sizeof(u32);
-	void *mem_mapped = ioremap_nocache(phys_addr_page, map_size);
+	void *mem_mapped = ioremap(phys_addr_page, map_size);
 	if (NULL != mem_mapped) {
 		iowrite32(value, ((u8 *)mem_mapped) + phys_offset);
 		iounmap(mem_mapped);
diff --git a/r6p2/src/devicedrv/mali/Makefile b/r6p2/src/devicedrv/mali/Makefile
index f39ae4d..c3790a0 100755
--- a/r6p2/src/devicedrv/mali/Makefile
+++ b/r6p2/src/devicedrv/mali/Makefile
@@ -193,14 +193,19 @@ ifeq ($(MALI_MEM_SWAP_TRACKING),1)
 EXTRA_DEFINES += -DMALI_MEM_SWAP_TRACKING=1
 endif
 
-all: $(UMP_SYMVERS_FILE)
-	$(MAKE) ARCH=$(ARCH) -C $(KDIR) M=$(CURDIR) modules
+modules: $(UMP_SYMVERS_FILE)
+	$(MAKE) -j$(JOBS) ARCH=$(ARCH) -C $(KDIR) M=$(CURDIR) modules
 	@rm $(FILES_PREFIX)__malidrv_build_info.c $(FILES_PREFIX)__malidrv_build_info.o
 
+all: modules
+
 clean:
-	$(MAKE) ARCH=$(ARCH) -C $(KDIR) M=$(CURDIR) clean
+	$(MAKE) -j$(JOBS) ARCH=$(ARCH) -C $(KDIR) M=$(CURDIR) clean
+
+install: modules
+	$(MAKE) -j$(JOBS) ARCH=$(ARCH) -C $(KDIR) M=$(CURDIR) INSTALL_MOD_PATH=$(INSTALL_MOD_PATH) modules_install
 
 kernelrelease:
-	$(MAKE) ARCH=$(ARCH) -C $(KDIR) kernelrelease
+	$(MAKE) -j$(JOBS) ARCH=$(ARCH) -C $(KDIR) kernelrelease
 
 export CONFIG KBUILD_EXTRA_SYMBOLS
diff --git a/r6p2/src/devicedrv/mali/common/mali_control_timer.c b/r6p2/src/devicedrv/mali/common/mali_control_timer.c
index fc6ceb4..57f3c3a 100755
--- a/r6p2/src/devicedrv/mali/common/mali_control_timer.c
+++ b/r6p2/src/devicedrv/mali/common/mali_control_timer.c
@@ -28,7 +28,7 @@ void mali_control_timer_add(u32 timeout)
 	_mali_osk_timer_add(mali_control_timer, _mali_osk_time_mstoticks(timeout));
 }
 
-static void mali_control_timer_callback(void *arg)
+static void mali_control_timer_callback(struct timer_list *t)
 {
 	if (mali_utilization_enabled()) {
 		struct mali_gpu_utilization_data *util_data = NULL;
diff --git a/r6p2/src/devicedrv/mali/common/mali_gp_job.c b/r6p2/src/devicedrv/mali/common/mali_gp_job.c
index 8dd19cb..fb8dcd8 100755
--- a/r6p2/src/devicedrv/mali/common/mali_gp_job.c
+++ b/r6p2/src/devicedrv/mali/common/mali_gp_job.c
@@ -133,7 +133,7 @@ struct mali_gp_job *mali_gp_job_create(struct mali_session_data *session, _mali_
 				goto fail1;
 			}
 
-			memory_list = (u32 __user *)(uintptr_t)uargs->deferred_mem_list;
+			memory_list = (u32 __user *)(uintptr_t)job->uargs.deferred_mem_list;
 
 			if (0 != _mali_osk_copy_from_user(job->varying_list, memory_list, sizeof(u32) * job->uargs.deferred_mem_num)) {
 				MALI_PRINT_ERROR(("Mali GP job: Failed to copy varying list from user space!\n"));
@@ -173,7 +173,7 @@ struct mali_gp_job *mali_gp_job_create(struct mali_session_data *session, _mali_
 				}
 			}
 
-			if (uargs->varying_memsize > MALI_UK_BIG_VARYING_SIZE) {
+			if (job->uargs.varying_memsize > MALI_UK_BIG_VARYING_SIZE) {
 				job->big_job = 1;
 			}
 		}
diff --git a/r6p2/src/devicedrv/mali/common/mali_group.c b/r6p2/src/devicedrv/mali/common/mali_group.c
index 9e31802..b9a0d0e 100755
--- a/r6p2/src/devicedrv/mali/common/mali_group.c
+++ b/r6p2/src/devicedrv/mali/common/mali_group.c
@@ -44,7 +44,7 @@ int mali_max_job_runtime = MALI_MAX_JOB_RUNTIME_DEFAULT;
 static void mali_group_bottom_half_mmu(void *data);
 static void mali_group_bottom_half_gp(void *data);
 static void mali_group_bottom_half_pp(void *data);
-static void mali_group_timeout(void *data);
+static void mali_group_timeout(struct timer_list *t);
 static void mali_group_reset_pp(struct mali_group *group);
 static void mali_group_reset_mmu(struct mali_group *group);
 
@@ -1768,9 +1768,11 @@ static void mali_group_bottom_half_pp(void *data)
 				      mali_pp_get_rawstat(group->pp_core), 0);
 }
 
-static void mali_group_timeout(void *data)
+static void mali_group_timeout(struct timer_list *t)
 {
-	struct mali_group *group = (struct mali_group *)data;
+	_mali_osk_timer_t *tim = container_of(t, _mali_osk_timer_t, timer);
+	struct mali_group *group = container_of(&tim, struct mali_group, timeout_timer);
+
 	MALI_DEBUG_ASSERT_POINTER(group);
 
 	MALI_DEBUG_PRINT(2, ("Group: timeout handler for %s at %u\n",
diff --git a/r6p2/src/devicedrv/mali/common/mali_kernel_core.c b/r6p2/src/devicedrv/mali/common/mali_kernel_core.c
index c16b444..f092ecd 100755
--- a/r6p2/src/devicedrv/mali/common/mali_kernel_core.c
+++ b/r6p2/src/devicedrv/mali/common/mali_kernel_core.c
@@ -144,28 +144,28 @@ static _mali_osk_errcode_t mali_parse_product_info(void)
 				switch (pp_version >> 16) {
 				case MALI200_PP_PRODUCT_ID:
 					global_product_id = _MALI_PRODUCT_ID_MALI200;
-					MALI_DEBUG_PRINT(2, ("Found Mali GPU Mali-200 r%up%u\n", global_gpu_major_version, global_gpu_minor_version));
+					MALI_PRINT(("Found Mali GPU Mali-200 r%up%u\n", global_gpu_major_version, global_gpu_minor_version));
 					MALI_PRINT_ERROR(("Mali-200 is not supported by this driver.\n"));
 					_mali_osk_abort();
 					break;
 				case MALI300_PP_PRODUCT_ID:
 					global_product_id = _MALI_PRODUCT_ID_MALI300;
-					MALI_DEBUG_PRINT(2, ("Found Mali GPU Mali-300 r%up%u\n", global_gpu_major_version, global_gpu_minor_version));
+					MALI_PRINT(("Found Mali GPU Mali-300 r%up%u\n", global_gpu_major_version, global_gpu_minor_version));
 					break;
 				case MALI400_PP_PRODUCT_ID:
 					global_product_id = _MALI_PRODUCT_ID_MALI400;
-					MALI_DEBUG_PRINT(2, ("Found Mali GPU Mali-400 MP r%up%u\n", global_gpu_major_version, global_gpu_minor_version));
+					MALI_PRINT(("Found Mali GPU Mali-400 MP r%up%u\n", global_gpu_major_version, global_gpu_minor_version));
 					break;
 				case MALI450_PP_PRODUCT_ID:
 					global_product_id = _MALI_PRODUCT_ID_MALI450;
-					MALI_DEBUG_PRINT(2, ("Found Mali GPU Mali-450 MP r%up%u\n", global_gpu_major_version, global_gpu_minor_version));
+					MALI_PRINT(("Found Mali GPU Mali-450 MP r%up%u\n", global_gpu_major_version, global_gpu_minor_version));
 					break;
 				case MALI470_PP_PRODUCT_ID:
 					global_product_id = _MALI_PRODUCT_ID_MALI470;
-					MALI_DEBUG_PRINT(2, ("Found Mali GPU Mali-470 MP r%up%u\n", global_gpu_major_version, global_gpu_minor_version));
+					MALI_PRINT(("Found Mali GPU Mali-470 MP r%up%u\n", global_gpu_major_version, global_gpu_minor_version));
 					break;
 				default:
-					MALI_DEBUG_PRINT(2, ("Found unknown Mali GPU (r%up%u)\n", global_gpu_major_version, global_gpu_minor_version));
+					MALI_PRINT(("Found unknown Mali GPU (r%up%u)\n", global_gpu_major_version, global_gpu_minor_version));
 					return _MALI_OSK_ERR_FAULT;
 				}
 
@@ -588,7 +588,7 @@ static _mali_osk_errcode_t mali_parse_config_groups(void)
 
 	mali_max_pp_cores_group_1 = mali_inited_pp_cores_group_1;
 	mali_max_pp_cores_group_2 = mali_inited_pp_cores_group_2;
-	MALI_DEBUG_PRINT(2, ("%d+%d PP cores initialized\n", mali_inited_pp_cores_group_1, mali_inited_pp_cores_group_2));
+	MALI_PRINT(("%d+%d PP cores initialized\n", mali_inited_pp_cores_group_1, mali_inited_pp_cores_group_2));
 
 	return _MALI_OSK_ERR_OK;
 }
diff --git a/r6p2/src/devicedrv/mali/common/mali_osk_types.h b/r6p2/src/devicedrv/mali/common/mali_osk_types.h
index 6e9a133..f0622d3 100755
--- a/r6p2/src/devicedrv/mali/common/mali_osk_types.h
+++ b/r6p2/src/devicedrv/mali/common/mali_osk_types.h
@@ -50,6 +50,7 @@ typedef unsigned long long u64;
 #include <linux/types.h>
 #endif
 
+#include <linux/timer.h>
 /** @brief Mali Boolean type which uses MALI_TRUE and MALI_FALSE
   */
 typedef unsigned long mali_bool;
@@ -395,7 +396,12 @@ typedef struct _mali_osk_notification_t_struct {
  * by any callers of _mali_osk_timer_del(). Otherwise, a deadlock may occur.
  *
  * @param arg Function-specific data */
-typedef void (*_mali_osk_timer_callback_t)(void *arg);
+typedef void (*_mali_osk_timer_callback_t)(struct timer_list *t);
+
+
+struct _mali_osk_timer_t_struct {
+	struct timer_list timer;
+};
 
 /** @brief Private type for Timer Callback Objects */
 typedef struct _mali_osk_timer_t_struct _mali_osk_timer_t;
diff --git a/r6p2/src/devicedrv/mali/linux/mali_devfreq.c b/r6p2/src/devicedrv/mali/linux/mali_devfreq.c
index 0b0ba14..7771de4 100755
--- a/r6p2/src/devicedrv/mali/linux/mali_devfreq.c
+++ b/r6p2/src/devicedrv/mali/linux/mali_devfreq.c
@@ -232,8 +232,11 @@ int mali_devfreq_init(struct mali_device *mdev)
 	dp->get_cur_freq = mali_devfreq_cur_freq;
 	dp->exit = mali_devfreq_exit;
 
-	if (mali_devfreq_init_freq_table(mdev, dp))
-		return -EFAULT;
+	err = mali_devfreq_init_freq_table(mdev, dp);
+	if (err == -ENODEV)
+		return 0;
+	else
+		return err;
 
 	mdev->devfreq = devfreq_add_device(mdev->dev, dp,
 					   "simple_ondemand", NULL);
@@ -256,21 +259,20 @@ int mali_devfreq_init(struct mali_device *mdev)
 		if (NULL != data.gpu_cooling_ops) {
 			callbacks = data.gpu_cooling_ops;
 			MALI_DEBUG_PRINT(2, ("Mali GPU Thermal: Callback handler installed \n"));
+		} else {
+			MALI_PRINT(("Mali GPU Thermal: No power callbacks\n"));
 		}
 	}
 
-	if (callbacks) {
-		mdev->devfreq_cooling = of_devfreq_cooling_register_power(
-						mdev->dev->of_node,
-						mdev->devfreq,
-						callbacks);
-		if (IS_ERR_OR_NULL(mdev->devfreq_cooling)) {
-			err = PTR_ERR(mdev->devfreq_cooling);
-			MALI_PRINT_ERROR(("Failed to register cooling device (%d)\n", err));
-			goto cooling_failed;
-		} else {
-			MALI_DEBUG_PRINT(2, ("Mali GPU Thermal Cooling installed \n"));
-		}
+	mdev->devfreq_cooling = of_devfreq_cooling_register_power(mdev->dev->of_node,
+								  mdev->devfreq,
+								  callbacks);
+	if (IS_ERR_OR_NULL(mdev->devfreq_cooling)) {
+		err = PTR_ERR(mdev->devfreq_cooling);
+		MALI_PRINT_ERROR(("Failed to register cooling device (%d)\n", err));
+		goto cooling_failed;
+	} else {
+		MALI_DEBUG_PRINT(2, ("Mali GPU Thermal Cooling installed \n"));
 	}
 #endif
 
diff --git a/r6p2/src/devicedrv/mali/linux/mali_kernel_linux.c b/r6p2/src/devicedrv/mali/linux/mali_kernel_linux.c
index 9bfa2bd..8857ac1 100755
--- a/r6p2/src/devicedrv/mali/linux/mali_kernel_linux.c
+++ b/r6p2/src/devicedrv/mali/linux/mali_kernel_linux.c
@@ -1125,6 +1125,17 @@ static int mali_ioctl(struct inode *inode, struct file *filp, unsigned int cmd,
 	return err;
 }
 
+/*
+ * From 4.20.0 kernel vm_insert_pfn was dropped
+ * Make wrapper to preserve compatibility
+ */
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 20, 0)
+int vm_insert_pfn(struct vm_area_struct *vma, unsigned long addr,
+		  unsigned long pfn)
+{
+	return vm_fault_to_errno(vmf_insert_pfn(vma, addr, pfn), 0xffff);
+}
+#endif
 
 module_init(mali_module_init);
 module_exit(mali_module_exit);
diff --git a/r6p2/src/devicedrv/mali/linux/mali_kernel_linux.h b/r6p2/src/devicedrv/mali/linux/mali_kernel_linux.h
index 9b4307e..48a50dd 100755
--- a/r6p2/src/devicedrv/mali/linux/mali_kernel_linux.h
+++ b/r6p2/src/devicedrv/mali/linux/mali_kernel_linux.h
@@ -16,6 +16,7 @@ extern "C" {
 #endif
 
 #include <linux/cdev.h>     /* character device definitions */
+#include <linux/mm.h>
 #include <linux/idr.h>
 #include <linux/rbtree.h>
 #include "mali_kernel_license.h"
@@ -29,6 +30,25 @@ extern struct platform_device *mali_platform_device;
 #define CONFIG_PM_RUNTIME 1
 #endif
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 13, 0)
+#define __GFP_REPEAT __GFP_RETRY_MAYFAIL
+#endif
+
+/*
+ * From 4.20.0 kernel vm_insert_pfn was dropped
+ * Make wrapper to preserve compatibility
+ */
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 20, 0)
+extern int vm_insert_pfn(struct vm_area_struct *vma, unsigned long addr,
+			 unsigned long pfn);
+#endif
+
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 0, 0)
+#define _access_ok(TYPE, BUF, SIZE) access_ok(BUF, SIZE)
+#else
+#define _access_ok(TYPE, BUF, SIZE) access_ok(TYPE, BUF, SIZE)
+#endif
+
 #ifdef __cplusplus
 }
 #endif
diff --git a/r6p2/src/devicedrv/mali/linux/mali_memory.c b/r6p2/src/devicedrv/mali/linux/mali_memory.c
index 3300885..6715353 100755
--- a/r6p2/src/devicedrv/mali/linux/mali_memory.c
+++ b/r6p2/src/devicedrv/mali/linux/mali_memory.c
@@ -57,14 +57,28 @@ static void mali_mem_vma_close(struct vm_area_struct *vma)
 	vma->vm_private_data = NULL;
 }
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 17, 0)
+static vm_fault_t mali_mem_vma_fault(struct vm_fault *vmf)
+#elif LINUX_VERSION_CODE >= KERNEL_VERSION(4, 11, 0)
+static int mali_mem_vma_fault(struct vm_fault *vmf)
+#else
 static int mali_mem_vma_fault(struct vm_area_struct *vma, struct vm_fault *vmf)
+#endif
 {
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 11, 0)
+	struct vm_area_struct *vma = vmf->vma;
+#endif
 	mali_mem_allocation *alloc = (mali_mem_allocation *)vma->vm_private_data;
 	mali_mem_backend *mem_bkend = NULL;
 	int ret;
 	int prefetch_num = MALI_VM_NUM_FAULT_PREFETCH;
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 10, 0)
+	unsigned long address = vmf->address;
+#else
 	unsigned long address = (unsigned long)vmf->virtual_address;
+#endif
+
 	MALI_DEBUG_ASSERT(alloc->backend_handle);
 	MALI_DEBUG_ASSERT((unsigned long)alloc->cpu_mapping.addr <= address);
 
diff --git a/r6p2/src/devicedrv/mali/linux/mali_memory_cow.c b/r6p2/src/devicedrv/mali/linux/mali_memory_cow.c
index 54c66b8..effdf92 100755
--- a/r6p2/src/devicedrv/mali/linux/mali_memory_cow.c
+++ b/r6p2/src/devicedrv/mali/linux/mali_memory_cow.c
@@ -683,7 +683,7 @@ void _mali_mem_cow_copy_page(mali_page_node *src_node, mali_page_node *dst_node)
 		/*
 		* use ioremap to map src for BLOCK memory
 		*/
-		src = ioremap_nocache(_mali_page_node_get_dma_addr(src_node), _MALI_OSK_MALI_PAGE_SIZE);
+		src = ioremap(_mali_page_node_get_dma_addr(src_node), _MALI_OSK_MALI_PAGE_SIZE);
 		memcpy(dst, src , _MALI_OSK_MALI_PAGE_SIZE);
 		iounmap(src);
 	}
diff --git a/r6p2/src/devicedrv/mali/linux/mali_memory_os_alloc.c b/r6p2/src/devicedrv/mali/linux/mali_memory_os_alloc.c
index 7f229eb..eb17fa3 100755
--- a/r6p2/src/devicedrv/mali/linux/mali_memory_os_alloc.c
+++ b/r6p2/src/devicedrv/mali/linux/mali_memory_os_alloc.c
@@ -27,9 +27,13 @@
 #define MALI_OS_MEMORY_POOL_TRIM_JIFFIES (10 * CONFIG_HZ) /* Default to 10s */
 
 #if LINUX_VERSION_CODE >= KERNEL_VERSION(3, 8, 0)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 8, 0)
+static unsigned long dma_attrs_wc;
+#else
 /* Write combine dma_attrs */
 static DEFINE_DMA_ATTRS(dma_attrs_wc);
 #endif
+#endif
 
 #if LINUX_VERSION_CODE < KERNEL_VERSION(3, 0, 0)
 #if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 35)
@@ -200,7 +204,7 @@ int mali_mem_os_alloc_pages(mali_mem_os_mem *os_mem, u32 size)
 	/* Allocate new pages, if needed. */
 	for (i = 0; i < remaining; i++) {
 		dma_addr_t dma_addr;
-		gfp_t flags = __GFP_ZERO | __GFP_REPEAT | __GFP_NOWARN | __GFP_COLD;
+		gfp_t flags = __GFP_ZERO | __GFP_REPEAT | __GFP_NOWARN;
 		int err;
 
 #if defined(CONFIG_ARM) && !defined(CONFIG_ARM_LPAE)
@@ -511,7 +515,11 @@ _mali_osk_errcode_t mali_mem_os_get_table_page(mali_dma_addr *phys, mali_io_addr
 	spin_unlock(&mali_mem_page_table_page_pool.lock);
 
 	if (_MALI_OSK_ERR_OK != ret) {
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(3, 8, 0)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 8, 0)
+		*mapping = dma_alloc_attrs(&mali_platform_device->dev,
+					   _MALI_OSK_MALI_PAGE_SIZE, &tmp_phys,
+					   GFP_KERNEL, dma_attrs_wc);
+#elif LINUX_VERSION_CODE >= KERNEL_VERSION(3, 8, 0)
 		*mapping = dma_alloc_attrs(&mali_platform_device->dev,
 					   _MALI_OSK_MALI_PAGE_SIZE, &tmp_phys,
 					   GFP_KERNEL, &dma_attrs_wc);
@@ -550,7 +558,11 @@ void mali_mem_os_release_table_page(mali_dma_addr phys, void *virt)
 	} else {
 		spin_unlock(&mali_mem_page_table_page_pool.lock);
 
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(3, 8, 0)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 8, 0)
+		dma_free_attrs(&mali_platform_device->dev,
+			       _MALI_OSK_MALI_PAGE_SIZE, virt, phys,
+			       dma_attrs_wc);
+#elif LINUX_VERSION_CODE >= KERNEL_VERSION(3, 8, 0)
 		dma_free_attrs(&mali_platform_device->dev,
 			       _MALI_OSK_MALI_PAGE_SIZE, virt, phys,
 			       &dma_attrs_wc);
@@ -606,7 +618,10 @@ static void mali_mem_os_page_table_pool_free(size_t nr_to_free)
 
 	/* After releasing the spinlock: free the pages we removed from the pool. */
 	for (i = 0; i < nr_to_free; i++) {
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(3, 8, 0)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 8, 0)
+		dma_free_attrs(&mali_platform_device->dev, _MALI_OSK_MALI_PAGE_SIZE,
+			       virt_arr[i], (dma_addr_t)phys_arr[i], dma_attrs_wc);
+#elif LINUX_VERSION_CODE >= KERNEL_VERSION(3, 8, 0)
 		dma_free_attrs(&mali_platform_device->dev, _MALI_OSK_MALI_PAGE_SIZE,
 			       virt_arr[i], (dma_addr_t)phys_arr[i], &dma_attrs_wc);
 #else
@@ -757,7 +772,9 @@ _mali_osk_errcode_t mali_mem_os_init(void)
 		return _MALI_OSK_ERR_NOMEM;
 	}
 
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(3, 8, 0)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 8, 0)
+	dma_attrs_wc = DMA_ATTR_WRITE_COMBINE;
+#elif LINUX_VERSION_CODE >= KERNEL_VERSION(3, 8, 0)
 	dma_set_attr(DMA_ATTR_WRITE_COMBINE, &dma_attrs_wc);
 #endif
 
diff --git a/r6p2/src/devicedrv/mali/linux/mali_memory_secure.c b/r6p2/src/devicedrv/mali/linux/mali_memory_secure.c
index 7856ae6..b104fd6 100755
--- a/r6p2/src/devicedrv/mali/linux/mali_memory_secure.c
+++ b/r6p2/src/devicedrv/mali/linux/mali_memory_secure.c
@@ -15,6 +15,9 @@
 #include <linux/mutex.h>
 #include <linux/dma-mapping.h>
 #include <linux/dma-buf.h>
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 16, 0)
+#include <linux/dma-direct.h>
+#endif
 
 _mali_osk_errcode_t mali_mem_secure_attach_dma_buf(mali_mem_secure *secure_mem, u32 size, int mem_fd)
 {
diff --git a/r6p2/src/devicedrv/mali/linux/mali_memory_swap_alloc.c b/r6p2/src/devicedrv/mali/linux/mali_memory_swap_alloc.c
index 4793328..cdc8525 100755
--- a/r6p2/src/devicedrv/mali/linux/mali_memory_swap_alloc.c
+++ b/r6p2/src/devicedrv/mali/linux/mali_memory_swap_alloc.c
@@ -52,9 +52,14 @@ extern struct mali_mem_os_allocator mali_mem_os_allocator;
 #define MALI_SWAP_LOW_MEM_DEFAULT_VALUE (60*1024*1024)
 #define MALI_SWAP_INVALIDATE_MALI_ADDRESS (0)               /* Used to mark the given memory cookie is invalidate. */
 #define MALI_SWAP_GLOBAL_SWAP_FILE_SIZE (0xFFFFFFFF)
-#define MALI_SWAP_GLOBAL_SWAP_FILE_INDEX ((MALI_SWAP_GLOBAL_SWAP_FILE_SIZE) >> PAGE_CACHE_SHIFT)
 #define MALI_SWAP_GLOBAL_SWAP_FILE_INDEX_RESERVE (1 << 15) /* Reserved for CoW nonlinear swap backend memory, the space size is 128MB. */
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 6, 0)
+#define MALI_SWAP_GLOBAL_SWAP_FILE_INDEX ((MALI_SWAP_GLOBAL_SWAP_FILE_SIZE) >> PAGE_SHIFT)
+#else
+#define MALI_SWAP_GLOBAL_SWAP_FILE_INDEX ((MALI_SWAP_GLOBAL_SWAP_FILE_SIZE) >> PAGE_CACHE_SHIFT)
+#endif
+
 unsigned int mali_mem_swap_out_threshold_value = MALI_SWAP_LOW_MEM_DEFAULT_VALUE;
 
 /**
@@ -183,7 +188,11 @@ static void mali_mem_swap_out_page_node(mali_page_node *page_node)
 	dma_unmap_page(&mali_platform_device->dev, page_node->swap_it->dma_addr,
 		       _MALI_OSK_MALI_PAGE_SIZE, DMA_TO_DEVICE);
 	set_page_dirty(page_node->swap_it->page);
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 6, 0)
+	put_page(page_node->swap_it->page);
+#else
 	page_cache_release(page_node->swap_it->page);
+#endif
 }
 
 void mali_mem_swap_unlock_single_mem_backend(mali_mem_backend *mem_bkend)
@@ -248,7 +257,11 @@ static void mali_mem_swap_swapped_bkend_pool_shrink(_mali_mem_swap_pool_shrink_t
 	}
 
 	/* Get system free pages number. */
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 14, 0)
+	system_free_size = global_zone_page_state(NR_FREE_PAGES) * PAGE_SIZE;
+#else
 	system_free_size = global_page_state(NR_FREE_PAGES) * PAGE_SIZE;
+#endif
 	last_gpu_utilization = _mali_ukk_utilization_gp_pp();
 
 	if ((last_gpu_utilization < gpu_utilization_threshold_value)
@@ -576,7 +589,11 @@ int mali_mem_swap_alloc_pages(mali_mem_swap *swap_mem, u32 size, u32 *bkend_idx)
 		list_add_tail(&m_page->list, &swap_mem->pages);
 	}
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 14, 0)
+	system_free_size = global_zone_page_state(NR_FREE_PAGES) * PAGE_SIZE;
+#else
 	system_free_size = global_page_state(NR_FREE_PAGES) * PAGE_SIZE;
+#endif
 
 	if ((system_free_size < mali_mem_swap_out_threshold_value)
 	    && (mem_backend_swapped_pool_size > (mali_mem_swap_out_threshold_value >> 2))
diff --git a/r6p2/src/devicedrv/mali/linux/mali_osk_low_level_mem.c b/r6p2/src/devicedrv/mali/linux/mali_osk_low_level_mem.c
index bc713a1..06d86a3 100755
--- a/r6p2/src/devicedrv/mali/linux/mali_osk_low_level_mem.c
+++ b/r6p2/src/devicedrv/mali/linux/mali_osk_low_level_mem.c
@@ -33,7 +33,7 @@ void _mali_osk_write_mem_barrier(void)
 
 mali_io_address _mali_osk_mem_mapioregion(uintptr_t phys, u32 size, const char *description)
 {
-	return (mali_io_address)ioremap_nocache(phys, size);
+	return (mali_io_address)ioremap(phys, size);
 }
 
 void _mali_osk_mem_unmapioregion(uintptr_t phys, u32 size, mali_io_address virt)
diff --git a/r6p2/src/devicedrv/mali/linux/mali_osk_specific.h b/r6p2/src/devicedrv/mali/linux/mali_osk_specific.h
index adcca29..199363e 100755
--- a/r6p2/src/devicedrv/mali/linux/mali_osk_specific.h
+++ b/r6p2/src/devicedrv/mali/linux/mali_osk_specific.h
@@ -17,7 +17,7 @@
 #ifndef __MALI_OSK_SPECIFIC_H__
 #define __MALI_OSK_SPECIFIC_H__
 
-#include <asm/uaccess.h>
+#include <linux/uaccess.h>
 #include <linux/platform_device.h>
 #include <linux/gfp.h>
 #include <linux/hardirq.h>
diff --git a/r6p2/src/devicedrv/mali/linux/mali_osk_time.c b/r6p2/src/devicedrv/mali/linux/mali_osk_time.c
index 76876b6..cc9bd2a 100755
--- a/r6p2/src/devicedrv/mali/linux/mali_osk_time.c
+++ b/r6p2/src/devicedrv/mali/linux/mali_osk_time.c
@@ -46,14 +46,20 @@ void _mali_osk_time_ubusydelay(u32 usecs)
 
 u64 _mali_osk_time_get_ns(void)
 {
-	struct timespec tsval;
-	getnstimeofday(&tsval);
-	return (u64)timespec_to_ns(&tsval);
+	struct timespec64 tsval;
+	ktime_get_real_ts64(&tsval);
+	return (u64)timespec64_to_ns(&tsval);
 }
 
 u64 _mali_osk_boot_time_get_ns(void)
 {
-	struct timespec tsval;
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 3, 0)
+	return ktime_get_boottime_ns();
+#elif LINUX_VERSION_CODE >= KERNEL_VERSION(4, 20, 0)
+	return ktime_get_boot_ns();
+#else
+	struct timespec64 tsval;
 	get_monotonic_boottime(&tsval);
-	return (u64)timespec_to_ns(&tsval);
+	return (u64)timespec64_to_ns(&tsval);
+#endif
 }
diff --git a/r6p2/src/devicedrv/mali/linux/mali_osk_timers.c b/r6p2/src/devicedrv/mali/linux/mali_osk_timers.c
index 8ada2da..0a07682 100755
--- a/r6p2/src/devicedrv/mali/linux/mali_osk_timers.c
+++ b/r6p2/src/devicedrv/mali/linux/mali_osk_timers.c
@@ -18,16 +18,25 @@
 #include "mali_osk.h"
 #include "mali_kernel_common.h"
 
-struct _mali_osk_timer_t_struct {
-	struct timer_list timer;
-};
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4, 14, 0)
+
+#define TIMER_DATA_TYPE		unsigned long
+#define TIMER_FUNC_TYPE		void (*)(TIMER_DATA_TYPE)
+
+static inline void timer_setup(struct timer_list *timer,
+			       void (*callback)(struct timer_list *),
+			       unsigned int flags)
+{
+	__setup_timer(timer, (TIMER_FUNC_TYPE)callback,
+		      (TIMER_DATA_TYPE)timer, flags);
+}
+#endif
 
 typedef void (*timer_timeout_function_t)(unsigned long);
 
 _mali_osk_timer_t *_mali_osk_timer_init(void)
 {
 	_mali_osk_timer_t *t = (_mali_osk_timer_t *)kmalloc(sizeof(_mali_osk_timer_t), GFP_KERNEL);
-	if (NULL != t) init_timer(&t->timer);
 	return t;
 }
 
@@ -65,8 +74,7 @@ mali_bool _mali_osk_timer_pending(_mali_osk_timer_t *tim)
 void _mali_osk_timer_setcallback(_mali_osk_timer_t *tim, _mali_osk_timer_callback_t callback, void *data)
 {
 	MALI_DEBUG_ASSERT_POINTER(tim);
-	tim->timer.data = (unsigned long)data;
-	tim->timer.function = (timer_timeout_function_t)callback;
+	timer_setup(&tim->timer, callback, 0);
 }
 
 void _mali_osk_timer_term(_mali_osk_timer_t *tim)
diff --git a/r6p2/src/devicedrv/mali/linux/mali_ukk_mem.c b/r6p2/src/devicedrv/mali/linux/mali_ukk_mem.c
index 3dfe345..d078f60 100755
--- a/r6p2/src/devicedrv/mali/linux/mali_ukk_mem.c
+++ b/r6p2/src/devicedrv/mali/linux/mali_ukk_mem.c
@@ -202,8 +202,8 @@ int mem_write_safe_wrapper(struct mali_session_data *session_data, _mali_uk_mem_
 	kargs.ctx = (uintptr_t)session_data;
 
 	/* Check if we can access the buffers */
-	if (!access_ok(VERIFY_WRITE, kargs.dest, kargs.size)
-	    || !access_ok(VERIFY_READ, kargs.src, kargs.size)) {
+	if (!_access_ok(VERIFY_WRITE, kargs.dest, kargs.size)
+	    || !_access_ok(VERIFY_READ, kargs.src, kargs.size)) {
 		return -EINVAL;
 	}
 
@@ -261,7 +261,7 @@ int mem_dump_mmu_page_table_wrapper(struct mali_session_data *session_data, _mal
 		goto err_exit;
 
 	user_buffer = (void __user *)(uintptr_t)kargs.buffer;
-	if (!access_ok(VERIFY_WRITE, user_buffer, kargs.size))
+	if (!_access_ok(VERIFY_WRITE, user_buffer, kargs.size))
 		goto err_exit;
 
 	/* allocate temporary buffer (kernel side) to store mmu page table info */
diff --git a/r6p2/src/devicedrv/mali/platform/arm/arm.c b/r6p2/src/devicedrv/mali/platform/arm/arm.c
index a7ff1b2..c95eee7 100755
--- a/r6p2/src/devicedrv/mali/platform/arm/arm.c
+++ b/r6p2/src/devicedrv/mali/platform/arm/arm.c
@@ -96,7 +96,7 @@ static int mali_secure_mode_init_juno(void)
 
 	MALI_DEBUG_ASSERT(NULL == secure_mode_mapped_addr);
 
-	secure_mode_mapped_addr = ioremap_nocache(phys_addr_page, map_size);
+	secure_mode_mapped_addr = ioremap(phys_addr_page, map_size);
 	if (NULL != secure_mode_mapped_addr) {
 		return mali_gpu_reset_and_secure_mode_disable_juno();
 	}
@@ -574,7 +574,7 @@ static u32 mali_read_phys(u32 phys_addr)
 	u32 phys_offset    = phys_addr & 0x00001FFF;
 	u32 map_size       = phys_offset + sizeof(u32);
 	u32 ret = 0xDEADBEEF;
-	void *mem_mapped = ioremap_nocache(phys_addr_page, map_size);
+	void *mem_mapped = ioremap(phys_addr_page, map_size);
 	if (NULL != mem_mapped) {
 		ret = (u32)ioread32(((u8 *)mem_mapped) + phys_offset);
 		iounmap(mem_mapped);
@@ -589,7 +589,7 @@ static void mali_write_phys(u32 phys_addr, u32 value)
 	u32 phys_addr_page = phys_addr & 0xFFFFE000;
 	u32 phys_offset    = phys_addr & 0x00001FFF;
 	u32 map_size       = phys_offset + sizeof(u32);
-	void *mem_mapped = ioremap_nocache(phys_addr_page, map_size);
+	void *mem_mapped = ioremap(phys_addr_page, map_size);
 	if (NULL != mem_mapped) {
 		iowrite32(value, ((u8 *)mem_mapped) + phys_offset);
 		iounmap(mem_mapped);
diff --git a/r8p1/src/devicedrv/mali/linux/mali_memory_cow.c b/r8p1/src/devicedrv/mali/linux/mali_memory_cow.c
index 827458f..b4b57e0 100644
--- a/r8p1/src/devicedrv/mali/linux/mali_memory_cow.c
+++ b/r8p1/src/devicedrv/mali/linux/mali_memory_cow.c
@@ -683,7 +683,7 @@ void _mali_mem_cow_copy_page(mali_page_node *src_node, mali_page_node *dst_node)
 		/*
 		* use ioremap to map src for BLOCK memory
 		*/
-		src = ioremap_nocache(_mali_page_node_get_dma_addr(src_node), _MALI_OSK_MALI_PAGE_SIZE);
+		src = ioremap(_mali_page_node_get_dma_addr(src_node), _MALI_OSK_MALI_PAGE_SIZE);
 		memcpy(dst, src , _MALI_OSK_MALI_PAGE_SIZE);
 		iounmap(src);
 	}
diff --git a/r8p1/src/devicedrv/mali/linux/mali_osk_low_level_mem.c b/r8p1/src/devicedrv/mali/linux/mali_osk_low_level_mem.c
index 923bbbd..26da23b 100644
--- a/r8p1/src/devicedrv/mali/linux/mali_osk_low_level_mem.c
+++ b/r8p1/src/devicedrv/mali/linux/mali_osk_low_level_mem.c
@@ -33,7 +33,7 @@ void _mali_osk_write_mem_barrier(void)
 
 mali_io_address _mali_osk_mem_mapioregion(uintptr_t phys, u32 size, const char *description)
 {
-	return (mali_io_address)ioremap_nocache(phys, size);
+	return (mali_io_address)ioremap(phys, size);
 }
 
 void _mali_osk_mem_unmapioregion(uintptr_t phys, u32 size, mali_io_address virt)
diff --git a/r8p1/src/devicedrv/mali/linux/mali_osk_time.c b/r8p1/src/devicedrv/mali/linux/mali_osk_time.c
index 3f2a9d9..df57c38 100644
--- a/r8p1/src/devicedrv/mali/linux/mali_osk_time.c
+++ b/r8p1/src/devicedrv/mali/linux/mali_osk_time.c
@@ -46,14 +46,14 @@ void _mali_osk_time_ubusydelay(u32 usecs)
 
 u64 _mali_osk_time_get_ns(void)
 {
-	struct timespec tsval;
-	getnstimeofday(&tsval);
-	return (u64)timespec_to_ns(&tsval);
+	struct timespec64 tsval;
+	ktime_get_real_ts64(&tsval);
+	return (u64)timespec64_to_ns(&tsval);
 }
 
 u64 _mali_osk_boot_time_get_ns(void)
 {
-	struct timespec tsval;
+	struct timespec64 tsval;
 	get_monotonic_boottime(&tsval);
-	return (u64)timespec_to_ns(&tsval);
+	return (u64)timespec64_to_ns(&tsval);
 }
diff --git a/r8p1/src/devicedrv/mali/platform/arm/arm.c b/r8p1/src/devicedrv/mali/platform/arm/arm.c
index 4e09aca..fd038d3 100644
--- a/r8p1/src/devicedrv/mali/platform/arm/arm.c
+++ b/r8p1/src/devicedrv/mali/platform/arm/arm.c
@@ -96,7 +96,7 @@ static int mali_secure_mode_init_juno(void)
 
 	MALI_DEBUG_ASSERT(NULL == secure_mode_mapped_addr);
 
-	secure_mode_mapped_addr = ioremap_nocache(phys_addr_page, map_size);
+	secure_mode_mapped_addr = ioremap(phys_addr_page, map_size);
 	if (NULL != secure_mode_mapped_addr) {
 		return mali_gpu_reset_and_secure_mode_disable_juno();
 	}
@@ -574,7 +574,7 @@ static u32 mali_read_phys(u32 phys_addr)
 	u32 phys_offset    = phys_addr & 0x00001FFF;
 	u32 map_size       = phys_offset + sizeof(u32);
 	u32 ret = 0xDEADBEEF;
-	void *mem_mapped = ioremap_nocache(phys_addr_page, map_size);
+	void *mem_mapped = ioremap(phys_addr_page, map_size);
 	if (NULL != mem_mapped) {
 		ret = (u32)ioread32(((u8 *)mem_mapped) + phys_offset);
 		iounmap(mem_mapped);
@@ -589,7 +589,7 @@ static void mali_write_phys(u32 phys_addr, u32 value)
 	u32 phys_addr_page = phys_addr & 0xFFFFE000;
 	u32 phys_offset    = phys_addr & 0x00001FFF;
 	u32 map_size       = phys_offset + sizeof(u32);
-	void *mem_mapped = ioremap_nocache(phys_addr_page, map_size);
+	void *mem_mapped = ioremap(phys_addr_page, map_size);
 	if (NULL != mem_mapped) {
 		iowrite32(value, ((u8 *)mem_mapped) + phys_offset);
 		iounmap(mem_mapped);
diff --git a/r9p0/src/devicedrv/mali/linux/mali_memory_cow.c b/r9p0/src/devicedrv/mali/linux/mali_memory_cow.c
index f1d44fe..d10818d 100644
--- a/r9p0/src/devicedrv/mali/linux/mali_memory_cow.c
+++ b/r9p0/src/devicedrv/mali/linux/mali_memory_cow.c
@@ -683,7 +683,7 @@ void _mali_mem_cow_copy_page(mali_page_node *src_node, mali_page_node *dst_node)
 		/*
 		* use ioremap to map src for BLOCK memory
 		*/
-		src = ioremap_nocache(_mali_page_node_get_dma_addr(src_node), _MALI_OSK_MALI_PAGE_SIZE);
+		src = ioremap(_mali_page_node_get_dma_addr(src_node), _MALI_OSK_MALI_PAGE_SIZE);
 		memcpy(dst, src , _MALI_OSK_MALI_PAGE_SIZE);
 		iounmap(src);
 	}
diff --git a/r9p0/src/devicedrv/mali/linux/mali_osk_low_level_mem.c b/r9p0/src/devicedrv/mali/linux/mali_osk_low_level_mem.c
index 84f93d9..2081af4 100644
--- a/r9p0/src/devicedrv/mali/linux/mali_osk_low_level_mem.c
+++ b/r9p0/src/devicedrv/mali/linux/mali_osk_low_level_mem.c
@@ -33,7 +33,7 @@ void _mali_osk_write_mem_barrier(void)
 
 mali_io_address _mali_osk_mem_mapioregion(uintptr_t phys, u32 size, const char *description)
 {
-	return (mali_io_address)ioremap_nocache(phys, size);
+	return (mali_io_address)ioremap(phys, size);
 }
 
 void _mali_osk_mem_unmapioregion(uintptr_t phys, u32 size, mali_io_address virt)
diff --git a/r9p0/src/devicedrv/mali/linux/mali_osk_time.c b/r9p0/src/devicedrv/mali/linux/mali_osk_time.c
index 03046a5..b9b1858 100644
--- a/r9p0/src/devicedrv/mali/linux/mali_osk_time.c
+++ b/r9p0/src/devicedrv/mali/linux/mali_osk_time.c
@@ -46,14 +46,14 @@ void _mali_osk_time_ubusydelay(u32 usecs)
 
 u64 _mali_osk_time_get_ns(void)
 {
-	struct timespec tsval;
-	getnstimeofday(&tsval);
-	return (u64)timespec_to_ns(&tsval);
+	struct timespec64 tsval;
+	ktime_get_real_ts64(&tsval);
+	return (u64)timespec64_to_ns(&tsval);
 }
 
 u64 _mali_osk_boot_time_get_ns(void)
 {
-	struct timespec tsval;
+	struct timespec64 tsval;
 	get_monotonic_boottime(&tsval);
-	return (u64)timespec_to_ns(&tsval);
+	return (u64)timespec64_to_ns(&tsval);
 }
diff --git a/r9p0/src/devicedrv/mali/platform/arm/arm.c b/r9p0/src/devicedrv/mali/platform/arm/arm.c
index cba09cd..66c1dbf 100644
--- a/r9p0/src/devicedrv/mali/platform/arm/arm.c
+++ b/r9p0/src/devicedrv/mali/platform/arm/arm.c
@@ -96,7 +96,7 @@ static int mali_secure_mode_init_juno(void)
 
 	MALI_DEBUG_ASSERT(NULL == secure_mode_mapped_addr);
 
-	secure_mode_mapped_addr = ioremap_nocache(phys_addr_page, map_size);
+	secure_mode_mapped_addr = ioremap(phys_addr_page, map_size);
 	if (NULL != secure_mode_mapped_addr) {
 		return mali_gpu_reset_and_secure_mode_disable_juno();
 	}
@@ -574,7 +574,7 @@ static u32 mali_read_phys(u32 phys_addr)
 	u32 phys_offset    = phys_addr & 0x00001FFF;
 	u32 map_size       = phys_offset + sizeof(u32);
 	u32 ret = 0xDEADBEEF;
-	void *mem_mapped = ioremap_nocache(phys_addr_page, map_size);
+	void *mem_mapped = ioremap(phys_addr_page, map_size);
 	if (NULL != mem_mapped) {
 		ret = (u32)ioread32(((u8 *)mem_mapped) + phys_offset);
 		iounmap(mem_mapped);
@@ -589,7 +589,7 @@ static void mali_write_phys(u32 phys_addr, u32 value)
 	u32 phys_addr_page = phys_addr & 0xFFFFE000;
 	u32 phys_offset    = phys_addr & 0x00001FFF;
 	u32 map_size       = phys_offset + sizeof(u32);
-	void *mem_mapped = ioremap_nocache(phys_addr_page, map_size);
+	void *mem_mapped = ioremap(phys_addr_page, map_size);
 	if (NULL != mem_mapped) {
 		iowrite32(value, ((u8 *)mem_mapped) + phys_offset);
 		iounmap(mem_mapped);
